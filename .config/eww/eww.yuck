(include "./notifications.yuck")

(defwidget appmenu []
  (eventbox :cursor "pointer"
   (button :class "appmenu-button"
           :height 28
           :onclick "jgmenu_run")))
    


(defwidget clock []
  (eventbox :tooltip date
    (box :orientation "v"
         :space-evenly false
         :class "clock"
     (box :class "clock-text hour" hour)
     (box :class "clock-separator" :height 1 :width 1)
     (box :class "clock-text min" min))))
    
  


(deflisten network "~/n.sh")
(defwidget netmonitor []
  (eventbox :onhover "eww open network-monitor-tooltip" :onhoverlost "eww close network-monitor-tooltip"
    (box :orientation "h"
         :space-evenly false
         :halign "center"
         :class "netmonitor"
      (box :class "network-arrow ${EWW_NET["wlan0"]["NET_UP"] < 100000     ? "net-gray" :
                                   EWW_NET["wlan0"]["NET_UP"] < 1000000    ? "net-green" :
                                   EWW_NET["wlan0"]["NET_UP"] < 10000000   ? "net-yellow" :
                                   "net-red" }" "↑")

      (box :class "network-arrow ${EWW_NET["wlan0"]["NET_DOWN"] < 100000   ? "net-gray" :
                                   EWW_NET["wlan0"]["NET_DOWN"] < 1000000  ? "net-green" :
                                   EWW_NET["wlan0"]["NET_DOWN"] < 10000000 ? "net-yellow" :
                                   "net-red" }" "↓"))))
    
  


(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll date :interval "3600s" "date")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "6px" :y "0px" :width "32px" :height "1080px" :anchor "left center")
  ; :stacking "fg"
  :wm-ignore false
  :reserve (struts :distance "38px" :side "left")
  :windowtype "dock"

  (box :class "bar-window" 
    :orientation "v"
    :space-evenly true
    (box :class "bar-top"
      :orientation "v"
      :valign "start"
      :space-evenly false
      (appmenu))
    (box :class "bar-mid")
    (box :class "bar-bot"
         :valign "end"
         :orientation "v"
         :space-evenly false
      (netmonitor)
      (clock))))
    
  


(defwindow bar2
  :monitor 1
  :geometry (geometry :x "8px" :y "0px" :width "32px" :height "1050px")
  :anchor "left center"
  ; :stacking "fg"
  :wm-ignore false
  :reserve (struts :distance "40px" :side "left")
  :windowtype "dock"

  (box :class "bar-window" 
    :orientation "v"
    :space-evenly true
    (box :class "bar-top")
    (box :class "bar-mid")
    (box :class "bar-bot"
         :valign "end"
         :orientation "v"
         :space-evenly false
      (netmonitor)
      (clock))))
    
  


(defwindow network-monitor-tooltip
  :monitor 0
  :geometry (geometry :x "46px" :y "-35px" :width "110px" :height "50px" :anchor "left bottom")
  :anchor "left center"
  :wm-ignore true
  :windowtype "normal"

  (box :class "net-tooltip" :orientation "v" :space-evenly true

    (box :space-evenly false
      (box :halign "start" "↑")
      (box :space-evenly false :orientation "h" :halign "end" :hexpand true
        { EWW_NET["wlan0"]["NET_UP"] > 1000000 ?
         round(EWW_NET["wlan0"]["NET_UP"] / 1000000, 1)
         : round(EWW_NET["wlan0"]["NET_UP"] / 1000, 1)}
        
        { EWW_NET["wlan0"]["NET_UP"] > 1000000 ?
            " Mo/s"
          : " ko/s"}))

      
      
     
        
      
    

    (box :space-evenly false 
      (box :halign "start" "↓")
      (box :space-evenly false :orientation "h" :halign "end" :hexpand true
        { EWW_NET["wlan0"]["NET_DOWN"] > 1000000 ?
         round(EWW_NET["wlan0"]["NET_DOWN"] / 1000000, 1)
         : round(EWW_NET["wlan0"]["NET_DOWN"] / 1000, 1)}
        
        { EWW_NET["wlan0"]["NET_DOWN"] > 1000000 ?
            " Mo/s"
          : " ko/s"}))))
        
      
    

  


